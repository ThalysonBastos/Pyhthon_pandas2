# -*- coding: utf-8 -*-
"""Olá, este é o Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd

#Série com elementos textuais
nossa_serie = pd.Series(['Goiaba', 'Abacaxi', 'Morango', 'Uva'])
nossa_serie

#Série com numeros inteiros
nossa_serie = pd.Series([1, 2, 3, 4])
nossa_serie

#Serie temporal
serie_temporal = pd.Series([pd.Timestamp('2024-08-08'), pd.Timestamp('2024-10-08'), pd.Timestamp('2024-10-07')])
serie_temporal

"""Temos outra maneira de construir uma série é indicando um nome para cada elemento, no Pandas esses nomes são chamados de Index

"""

#Série com Index do tipo Literal (str/object)
serie_com_nomes = pd.Series({'um': 1, 'dois': 2, 'tres': 3})
serie_com_nomes

serie_com_nomes = pd.Series({1: 'um', 2: 'dois', 3: 'tres'})
serie_com_nomes

serie = pd.Series(
    {
        'a':0,
        'b':1,
        'c':2,
        'd':3,
        'e':4,
        'f':5,
        'g':6,
        'h':7,
        'i':8,
        'j':9,
        'k':10,
        'l':11,
        'm':12,
        'n':13,
        'o':14,
        'p':15,
        'q':16,
        'r':17,
        's':18,
        't':19
    }
)
serie

"""loc: Acessa o dado baseado em seu index (nome). O operador [] também pode ser utilizado como alternativa ao loc

iloc: Acessa o dado utilizando um inteiro que indica sua posição na série
"""

print(serie.loc['j']) #loc procura pelo nome
print(serie['g'])
print()
print(serie.iloc[10]) #iloc procura pela posição
print()
print(serie.iloc[0:10])
print(serie[0:5])
print()
print(serie.iloc[ [0, 2, 4, 8, 11] ])# acessa pela posição

serie.loc['b'] = 'letra B'
serie['j'] = 'letra J'
serie.iloc[10] = 'letra P'
print(serie)

"""DataFrames

Podem ser criados por meio de um dicionário que mapeia os nomes das colunas e suas respectivas series
"""

nomes = pd.Series(["Ana", "Bruno", "Carlos", "Daniela", "Eduardo", "Fernanda", "Gabriel", "Helena", "Igor", "Juliana"])
idades = pd.Series([25, 30, 22, 28, 35, 27, 24, 29, 31, 26])
peso = pd.Series([55, 78, 68, 60, 85, 62, 70, 58, 80, 65])

df = pd.DataFrame({
    'Nome': nomes,
    'Idade': idades,
    'Peso': peso
})
df

"""Adicionando novas colunas"""

df['Cidade'] = pd.Series(['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Curitiba', 'Salvador', 'Fortaleza', 'Manaus', 'Recife', 'Goiânia'])
df

#O nome será definido como index
df = df.set_index('Nome')
df

df['Altura'] = pd.Series([165, 180, 175, 170, 185, 168, 178, 160, 182, 172])
df

df['Peso']

df.Peso

df.loc['Igor','Altura'] = 175
df

df[['Cidade', 'Peso']]

df.iloc[0:3]

df.loc['Ana', :] = [99, 99.9, 'Uberlândia', 85]
df

df = df.drop(columns=['Altura'])
df

"""**Manipulação de Dados**


"""

df = pd.read_csv('https://raw.githubusercontent.com/rashida048/Datasets/master/titanic_data.csv')

df

df.head(10)

df.tail() #pega as 5 ultimas linhas ou quantas preferir

df.info()

df = df.rename(columns={'PassengerId': 'ID',
                        'Survived': 'SOBREV',
                        'Pclass' : 'CLASSE',
                        'Name': 'NOME',
                        'Sex': 'SEXO',
                        'Age': 'IDADE',
                        'SibSp': 'N_ADULTOS',
                        'Parch': 'N_CRIANCAS',
                        'Ticket': 'BILHETE',
                        'Fare': 'TARIFA',
                        'Cabin': 'CABINE',
                        'Embarked': 'LOCAL'
                        })
df.head()

"""Convertendo SOBREV para tipo Bool e criando uma nova coluna FALECEU"""

df.SOBREV = df.SOBREV.astype(bool)
df['FALECEU'] = ~df.SOBREV
df.head()

"""Convertendo as taxas da passagem para R$
Calculando o numero de pessoas por cabine e a taxa por pessoa
"""

df.TARIFA = df.TARIFA * 5.50
df['TOTAL_PESSOAS'] = df.N_ADULTOS + df.N_CRIANCAS + 1
df['TARIFA_PESSOA'] = df.TARIFA / df.TOTAL_PESSOAS

df.head()

df = df.rename(columns={'TARIFA': 'TARIFA_CABINE'})
df.head()

"""Operações nas strings"""

df.NOME = df.NOME.str.lower()
df.NOME = df.NOME.str.replace('mrs', 'sra.')
df.NOME = df.NOME.str.replace('mr', 'sr.')
df.NOME = df.NOME.str.replace('miss', 'srta')

df.head()

df.SEXO = df.SEXO.map({'male': 'homem', 'female': 'mulher'})
df.head()

"""Utilizamos o fillna para trocar todos os campos vazios da cabine por PORÃO"""

df.CABINE = df.CABINE.fillna('PORÃO')
df.head()

"""Criando uma função customizada"""

def define_tipo(total_pessoas):
  if total_pessoas == 1:
    return 'individual'
  if total_pessoas == 2:
    return 'casal'
  if total_pessoas > 2:
    return 'familia'

df['TIPO'] = df.TOTAL_PESSOAS.apply(define_tipo)
df.head()

"""Ordenando os dados"""

df.sort_values(['TARIFA_CABINE', 'TOTAL_PESSOAS'])

"""Describe, usado para uma sumarização geral de todas as colunas numericas"""

df.describe()

"""Calculando valores individuais para as colunas"""

df.IDADE.describe()

print("Pessoa mais velha: ", df.IDADE.max())
print("Pessoa mais nova: ", df.IDADE.min())
print("Média de idade: ", df.IDADE.mean())
print("Total das Taxas: ", df.TARIFA_CABINE.sum())
print("Total de pessoas: ", df.TOTAL_PESSOAS.sum())
print("Média de tarifa por pessoa: ", df.TARIFA_PESSOA.mean())
print("Total de Mulheres: ", df.SEXO.value_counts()['mulher'])
print("Total de Homens: ", df.SEXO.value_counts()['homem'])

df.SEXO.value_counts()

df.SEXO.value_counts(normalize=True) #Calculando a porcentagem

"""Filtrando os dados"""

df[df.SEXO == 'mulher']

"""Filtrandos os homes na classe 1"""

df[(df.SEXO == 'homem') & (df.CLASSE == 1) & (df.IDADE >= 70)]

